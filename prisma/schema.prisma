generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//
// Represents a single post on the forum.
//
model Post {
  id       String    @id @default(cuid())
  title    String
  body     String?
  date     DateTime  @default(now())
  author   User?     @relation(fields: [authorId], references: [id])
  authorId String?
  upvotes  String[]
  downvotes String[]
  comments Comment[]
}

model Comment {
  id       String   @id @default(cuid())
  content  String
  postId   String
  authorId String?
  author   User?    @relation(fields: [authorId], references: [id])
  post     Post     @relation(fields: [postId], references: [id])
  date     DateTime @default(now())
}

model Notification {
  id          String  @id @unique
  title       String
  description String
  userId      String?
  user        User?   @relation(fields: [userId], references: [id])
}

//
// Represents a user of the aviquo platform
//
model User {
  id            String         @id @unique
  auth_session  Session[]
  key           Key[]
  firstName     String
  lastName      String
  email         String         @unique
  username      String         
  pfp           String?
  bio           String?
  numFollowers  Int
  numFollowing  Int
  createdAt     DateTime       @default(now()) @map(name: "date_joined")
  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  opportunities   Opportunity[]

  @@map(name: "users")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Company {
  name        String        @unique @db.VarChar(200)
  type        String        @db.VarChar(100)
  Opportunity Opportunity[]
}

model Opportunity {
  id          String @id @unique @default(cuid())
  name        String  @unique @db.VarChar(200)
  description String
  url         String
  type        String
  education   String?
  company     Company @relation(fields: [companyName], references: [name])
  users       User[]
  location    String?
  duration    String?
  deadline    DateTime?
  subjects    String?
  companyName String    @db.VarChar(200)
}

model Waitlist {
  email     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Forum {
  // user        User     @relation(fields: [userId], references: [id])
  id          String   @id @default(cuid())
  topic       String   @unique @db.VarChar(300)
  description String? //max_length:1000
  createdAt   DateTime @default(now()) @map(name: "created_at")
  userId      String
}
